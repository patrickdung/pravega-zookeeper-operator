# workflow name
name: CI

# on events
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  release:
    types:
      - created

env:
  CONTAINER_REGISTRY: ghcr.io
  # ## GH Repository must be lower case, when using in GH action
  CONTAINER_REPOSITORY: ${{ github.repository }}
  ORIGINAL_SOURCECODE_URL: https://github.com/pravega/zookeeper-operator

# jobs to run
jobs:
  init-env:
    name: Set env outputs
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      actions: none
      checks: none
      contents: none
      deployments: none
      issues: none
      packages: none
      pull-requests: none
      repository-projects: none
      security-events: none
      statuses: none
      # id-token: write # needed for signing the images with GitHub OIDC **not production ready**
    outputs:
      container_registry_base_uri: ${{ steps.set-env.outputs.container_registry_base_uri }}
    steps:
      - name: Set env for later jobs
        id: set-env
        run: |
          echo "container_registry_base_uri=$(echo $CONTAINER_REGISTRY/$(echo $CONTAINER_REPOSITORY | tr 'A-Z' 'a-z'))" >> $GITHUB_OUTPUT

  build:
    needs: [init-env]
    runs-on: ubuntu-latest
    permissions:
      actions: none
      checks: none
      contents: read
      deployments: none
      issues: none
      packages: write
      pull-requests: none
      repository-projects: none
      # GH action/scanners for sarif reports
      security-events: write
      statuses: none
      # id-token: 'read'
    steps:
    - name: Set up Go 1.17
      uses: actions/setup-go@v2
      with:
        go-version: 1.17
      id: go
    - name: Set up Go for root
      run: |
        sudo ln -sf `which go` `sudo which go` || true
        sudo go version
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3
    - name: get go version
      run: go version
    - name: Gofmt and License checks
      run: make check
    - name: unit tests
      run: make test
    - name: Codecov
      uses: codecov/codecov-action@v1.0.12
    - name: Set env
      run: |
        echo "KUBERNETES_VERSION=v1.23.1" >> $GITHUB_ENV
        echo "MINIKUBE_VERSION=v1.25.2" >> $GITHUB_ENV
        echo "KUBERNETES_CONFIG_FILE=$HOME/.kube/config" >> $GITHUB_ENV
        echo "CHANGE_MINIKUBE_NONE_USER=true" >> $GITHUB_ENV
    - name: minikube setup
      run: |
        curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/$KUBERNETES_VERSION/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        curl -Lo minikube https://storage.googleapis.com/minikube/releases/$MINIKUBE_VERSION/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
        sudo mount --make-rshared /
        sudo apt-get install -y conntrack
        CHANGE_MINIKUBE_NONE_USER=true
        export KUBERNETES_CONFIG_FILE=$HOME/.kube/config
        export KUBERNETES_CONFIG_FILE=$HOME/.kube/config;export CHANGE_MINIKUBE_NONE_USER=true;sudo minikube start --vm-driver=none --bootstrapper=kubeadm --kubernetes-version=$KUBERNETES_VERSION
        echo "minikube started, updating context"
        export KUBERNETES_CONFIG_FILE=$HOME/.kube/config;export CHANGE_MINIKUBE_NONE_USER=true; sudo minikube update-context
        echo "context is updated"
        #JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done
        sleep 60
        sudo kubectl create clusterrolebinding add-on-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:default
        echo "created cluster role"
        sudo kubectl cluster-info
        echo "cluster info"
        sudo kubectl -n kube-system get pod -o wide
        sudo kubectl create secret docker-registry regcred --docker-server=https://index.docker.io/v1/ --docker-username="testanisha"  --docker-password="123456789" --docker-email=testimage456@gmail.com
    #- name: E2E
    #  run: sudo make test-e2e
  publish:
    name: Publish docker image
    runs-on: ubuntu-latest
    needs: [init-env, build]
    #if: github.event_name == 'release' && github.event.action == 'created'
    permissions:
      actions: none
      checks: none
      contents: read
      deployments: none
      issues: none
      packages: write
      pull-requests: none
      repository-projects: none
      # GH action/scanners for sarif reports
      security-events: write
      statuses: none
      # id-token: 'read'
    outputs:
      remote_branch_name: ${{ steps.get-remote-branch-name.outputs.remote_branch_name }}
    steps:
    - name: Get branch name (tag) of latest release from official repo
      id: get-remote-branch-name
      run: |
        curl -sL https://api.github.com/repos/pravega/zookeeper-operator/releases | \
          jq -r ".[].tag_name" | grep -v rc | sort -r -V | head -n 1 > /tmp/release-latest-branch-name
        echo "REMOTE_BRANCH_NAME=$(cat /tmp/release-latest-branch-name)" >> $GITHUB_ENV
        echo "remote_branch_name=$(cat /tmp/release-latest-branch-name)" >> $GITHUB_OUTPUT
    - name: Check out code
      uses: actions/checkout@v3
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to Registry provider
      uses: docker/login-action@v2
      with:
        registry: ${{ env.CONTAINER_REGISTRY }}
        # GitHub
        username: ${{ github.actor }}
        password: ${{ secrets.PUBLISH_TOKEN }}
    - name: Build operator and push to container registry
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./Dockerfile
        build-args: |
          RELEASE_VERSION=${{ env.REMOTE_BRANCH_NAME }}
          LABEL_IMAGE_URL=${{ env.ORIGINAL_SOURCECODE_URL }}
          LABEL_IMAGE_SOURCE=https://github.com/${{ github.repository }}
        platforms: linux/arm64,linux/amd64
        push: true
        tags: |
          ${{ needs.init-env.outputs.container_registry_base_uri }}:${{ env.REMOTE_BRANCH_NAME }}
    - name: Build app-zookeeper and push to container registry
      uses: docker/build-push-action@v3
      with:
        context: ./docker
        file: ./docker/Dockerfile
        build-args: |
          RELEASE_VERSION=${{ env.REMOTE_BRANCH_NAME }}
          LABEL_IMAGE_URL=${{ env.ORIGINAL_SOURCECODE_URL }}
          LABEL_IMAGE_SOURCE=https://github.com/${{ github.repository }}
        platforms: linux/arm64,linux/amd64
        push: true
        tags: |
          ${{ needs.init-env.outputs.container_registry_base_uri }}:pravega-zookeeper-${{ env.REMOTE_BRANCH_NAME }}
